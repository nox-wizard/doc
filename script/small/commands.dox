/*!
\defgroup script_commands commands

\section commandsplayerinterface Player interface
Players can use ingame commands, that is, they can send commands to the server to make various things.
Not all commands are available to all players, every command needs a certain authorization to be used, this authorization
is the "command level" or "privlevel".<br>
The privlevel is a number, this number defines if a command is usable by a player or not.<br>
To use a command the player has to write:<br>
'[commandname] <br>
for example:<br>
'wipe 'kill 'invul <br>
are all commands.<br>
<br>
Usually a command takes some parameters wich specify how the command should work:<br>
'invul on<br>
'kill target<br>
are examples.

\section usingcommands Using commands
Using commands is easy, simpy type the command (with his parameters) and the follow the instructions that
appear as messages in the bottom left corner of the screen.<br>
Usually a command requires to target a character or item, in that case the target pointer will appear
with a prompt saying what you should target.
When a command requires parameters, there always some default values for the most used values.<br>
When a parameter has a default value tou can ommit it in the command call, and the default will be assumed.<br>
If you want to specify a parameter, you have to specify all the preceding parameters, or you will get errors.<br>
In the commands documentation, it is always written the dafault value for every parameter.

\section commandareas Command areas
A player who can use the 'area command, can set "command area".<br>
This is needed sometimes when you have to aplly a command to a large number of items/characters
and it would be boring to write the command many times.<br>
See the \ref script_command_area for more details.

\section customizability Customizability
You can define all commands you want, modify the privlevels, modify/erase existing commands, in other words,
you can do everything you want with commands!<br>
You can add a command by adding its name in __commands[][] array (in small-scripts/commands/constants.sma) and then you
have to write a public function with the following proptotype:

\code
	public cmd_commandname(const chr)
\endcode

So for example if you want to add a 'killme command you must enter "killme" in __commands[][]
(the place is not important, but leaving blank spaces in the array affects performance) and the declare:

\code
	public cmd_killme(cons chr)
\endcode

in one of your included files.
Once you set the command name and you have written the function you can edit the privlevel simply by modifying the value in __commands[][] (see default
commands for example).<br>
Actually you will see that __commands[][] has another field (__cmdFunc) wich is always empty for standard commands.
When this field is empty all works as described above, but if you put a public function name that function will be
called instead of cmd_commandname.

Tip: If you don't want to directly modify the file commands.sma (because you would have to update it every
time you download new scripts), remeber that you can modify it at
runtime, as it is not declared as const. So you can modify commands with a script.
The helper function addCommand(name[],priv,func[]) is intended for this purpose. 
*/







